var Files =  {
	'main.mask': `
		import Letter from './compos/Letter';
		Letter;
	`,
	'compos/Letter.mask': `
		define Letter {
			h4 > 'I am an A';
		}
	`,
	'global.mask': `
		import from './main';
		i > 'Lorem'
	`,
	'index.html': `
		<!doctype html>		
		<script type='text/mask' data-run='auto'>
			import from 'global.mask';
		</script>
		`
};

var Bundler, mask;
UTest({
	$before () {
		TestHelper.registerFiles(Files);

		mask = require('maskjs');
		Bundler = require('../../lib/bundler.js');

	},
	'should bundle mask' () {
		return Bundler.clearCache().build('main.mask', { 
			type: 'module',
			module: 'commonjs',
		}).done(resources => {
			eq_(resources.length, 1);
			var main = resources[0];
			
			eq_(main.type, 'mask'); 
			eq_(main.url, 'build/release/main.mask');

			var load = assert.avoid('Should not load the dependency');
			mask.cfg('getFile', load);

			var  html = mask.render(main.content)
			has_(html, 'I am an A</h4>')
			mask.cfg('getFile', null)
		});
	},
	'!should get mask resources for html' () {
		return Bundler
			.clearCache()
			.getResources('index.html')
			.then(arr => arr.map(x => x.toJSON(false)))
			.done(arr => {			
				eq_(arr.length, 4);

				//logger.log(arr);
				var paths = arr.map(x => x.url);
				deepEq_(paths, ['compos/Letter.mask', 'main.mask', 'global.mask', 'index.html']);

				var asModules = arr.map(x => x.asModules);
				deepEq_(asModules, [[], [], [], ['root']]);
			});
	},
	'should bundle scripts in html page' () {
		return Bundler.clearCache().build('index.html', {
			type: 'module',
			module: 'commonjs',
		}).done(resources => {
			
			eq_(resources.length, 2);
			eq_(resources[0].type, 'js');
			var script = resources[0];

			eval(script.content);
			eq_(typeof getData, 'function');
			deepEq_(getData(), {
				letters: ['a', 'b']
			});


			eq_(resources[1].type, 'html');
			has_(resources[1].content, 'src="build/release/main_index.js"');
			
		});
	}
})