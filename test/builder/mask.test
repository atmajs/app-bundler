var Files =  {
	'main.mask': `
		import Letter from './compos/Letter';
		Letter;
	`,
	'compos/Letter.mask': `
		define Letter {
			h4 > 'I am an A';
		}
	`,
	'global.mask': `
		import from './main';
		i > 'Lorem'
	`,
	'index.html': `
		<!doctype html>		
		<script type='text/mask' data-run='auto'>
			import from 'global.mask';
		</script>
	`,
	'about-a.mask': `
		span > 'AboutA';
	`,
	'about-b.mask': `
		span > 'AboutB';
	`,
	'info-a.mask': `
		span > 'InfoA';
	`,
	'info-b.mask': `
		span > 'InfoB';
	`,
	'pages.html': `
		<!doctype html>		
		<script type='text/mask' data-run='auto'>
			ViewManager {
				View page='about' {
					import from './about-a'
					import from './about-b';
				}
				View page='info' {
					import from './info-a';
					import from './info-b';
				}
			}
		</script>
	`,
	'scripts.mask': `
		import * as Provider from './Provider.js';

		define Foo {
			function onRenderStart () {
				this.model = this.$scope('Provider').getName();
			}
			h4 > '~[.]';
		}		
		Foo;
	`,
	'Provider.js': `
		module.exports = {
			getName: function () { return 'IFoo' }
		};
	`
};

var mask;
UTest({
	$before () {
		TestHelper.registerFiles(Files);

		mask = require('maskjs');
		
	},
	$teardown () {
		Bundler.clearCache();
		mask.Module.clearCache();
		mask.cfg('getFile');
	},
	'should bundle mask' () {
		return Bundler.build('main.mask', {}).done(resources => {
			eq_(resources.length, 1);
			var main = resources[0];
		
			eq_(main.type, 'mask'); 
			eq_(main.url, 'build/release/main.mask');

			var load = assert.avoid('Should not load the dependency');
			mask.cfg('getFile', load);

			var  html = mask.render(main.content)
			has_(html, 'I am an A</h4>')
			mask.cfg('getFile', null)
		});
	},
	'should get mask resources for html' () {
		return Bundler
			.getResources('index.html')
			.then(arr => arr.map(x => x.toJSON(false)))
			.done(arr => {			
				eq_(arr.length, 4);

				var paths = arr.map(x => x.url);
				deepEq_(paths, ['/compos/Letter.mask', '/main.mask', '/global.mask', '/index.html']);

				var asModules = arr.map(x => x.asModules);
				deepEq_(asModules, [['mask'], ['mask'], ['mask'], ['root']]);
			});
	},
	'should bundle mask in html page' () {
		return Bundler.build('index.html').done(resources => {
			
			eq_(resources.length, 1);
			eq_(resources[0].type, 'load');
			var main = resources[0];
			eq_(main.url, 'build/release/index.html');

			['compos/Letter.mask', 'main.mask', 'global.mask']
				.forEach(path => has_(main.content, `module path="/${path}"`));

		});
	},
	'should test mask sync module loading' (done) {
	
		var Files = {
			'MyComponents.mask': `
				module path='A.mask' {
					h1 > 'A'
				}
				module path='B.mask' {
					h1 > 'B'
				}
				module path='C.mask' {
					h1 > 'C'
				}
			`,
			'MyNumber.mask': `
				import * as Template from './B';
				Template;
			`
		};
		var _queue = [];
		mask.cfg('getFile', (path) => {
			var dfr = new mask.class.Deferred();
			var name = path.substring(path.lastIndexOf('/') + 1);
			var str = Files[name];			
			is_(str, 'String');
			_queue.push(name);
			if (name === 'MyComponents.mask') {
				setTimeout(() => dfr.resolve(str), 200);
				return dfr;
			}
			return dfr.resolve(str);
		});

		mask
			.renderAsync(`
				import sync from './MyComponents';
				import Number from './MyNumber';
			`)
			.done(x => {
				deepEq_(_queue, ['MyComponents.mask', 'MyNumber.mask']);
				done();
			})
	},
	'should test pages in html page' (done) {
		Bundler.build('pages.html').done(resources => {
			
			eq_(resources.length, 3);
			var urls = resources.map(x => x.url);
			deepEq_(urls, [
				'build/release/info_index.mask',
				'build/release/about_index.mask', 
				'build/release/pages.html'
			]);

			var main = resources[2];
 
			urls
				.slice(0, urls.length - 1)
				.forEach(path => has_(main.content, `import sync from '${path}';`));


			mask.cfg('getFile', path => {
				var resource = resources.find(x => path.indexOf(x.url) > -1);
				is_(resource, 'Object');
				return (new mask.class.Deferred()).resolve(resource.content);
			});

			var template = mask.j(main.content).find('script').text();

			mask
				.renderAsync(template)
				.done(html => {
					is_(html, 'String');
					done();
				})
		});
	},
	'should test mask scripts' (done) {
		Bundler.build('scripts.mask').done(resources => {
			
			eq_(resources.length, 2);
			var urls = resources.map(x => x.url);
			deepEq_(urls, [
				'build/release/main_index.js',
				'build/release/scripts.mask'
			]);

			
			var main = resources[1];
			urls
				.slice(0, urls.length - 1)
				.forEach(path => has_(main.content, `import sync from '${path}';`));


			mask.cfg('getScript', assert.await(path => {
				var resource = resources.find(x => path.indexOf(x.url) > -1);
				is_(resource, 'Object');
				
				eval(resource.content);
				
				return (new mask.class.Deferred()).resolve();
			}));
			
			var template = main.content
			mask
				.renderAsync(template, {}, {}, null, new mask.Compo())
				.fail(console.error)
				.done(html => {					
					has_(html, 'IFoo</h4>');
					done();
				})
				
		});
	},
	'should test mask with styles': {
	 	$before () {
	 		logger.log('B'.bold.green)
			TestHelper.registerFiles({
				'button.mask': `

					import from './button.css';
					import Clickable from './Clickable';
					define Button extends Clickable {
						h4 > '~[ $.getFoo() ]'
					}
				`,
				'Clickable.mask': `
					import from './clickable.css';
					define Clickable {
						function getFoo () {
							return 42;
						}
					}
				`,
				'button.css': `
					button { border: 0px; }
				`,
				'clickable.css': `{
					button:hover { background: red}
				}`
			});
		},

		'!should test deps' (done) {
			var bundler = new Bundler('button.mask');
			bundler.getResources().then(result => {
				logger.log(result.map(x => x.url));
			})
		},

		'should test build' () {

			Bundler.build('button.mask').done(resources => {

				logger.log(resources.length);
				return;
				
				eq_(resources.length, 2);
				var urls = resources.map(x => x.url);
				deepEq_(urls, [
					'build/release/main_index.js',
					'build/release/scripts.mask'
				]);

				
				var main = resources[1];
				urls
					.slice(0, urls.length - 1)
					.forEach(path => has_(main.content, `import sync from '${path}';`));


				mask.cfg('getScript', assert.await(path => {
					var resource = resources.find(x => path.indexOf(x.url) > -1);
					is_(resource, 'Object');
					
					eval(resource.content);
					
					return (new mask.class.Deferred()).resolve();
				}));
				
				var template = main.content
				mask
					.renderAsync(template, {}, {}, null, new mask.Compo())
					.fail(console.error)
					.done(html => {					
						has_(html, 'IFoo</h4>');
						done();
					})
					
			});
		}
	}
})