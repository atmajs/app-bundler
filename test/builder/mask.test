var Files =  {
	'main.mask': `
		import Letter from './compos/Letter';
		Letter;
	`,
	'compos/Letter.mask': `
		define Letter {
			h4 > 'I am an A';
		}
	`,
	'global.mask': `
		import from './main';
		i > 'Lorem'
	`,
	'index.html': `
		<!doctype html>		
		<script type='text/mask' data-run='auto'>
			import from 'global.mask';
		</script>
	`,
	'about-a.mask': `
		span > 'AboutA';
	`,
	'about-b.mask': `
		span > 'AboutB';
	`,
	'info-a.mask': `
		span > 'InfoA';
	`,
	'info-b.mask': `
		span > 'InfoB';
	`,
	'pages.html': `
		<!doctype html>		
		<script type='text/mask' data-run='auto'>
			ViewManager {
				View page='about' {
					import from './about-a'
					import from './about-b';
				}
				View page='info' {
					import from './info-a';
					import from './info-b';
				}
			}
		</script>
	`
};

var mask;
UTest({
	$before () {
		TestHelper.registerFiles(Files);

		mask = require('maskjs');
		
	},
	$teardown () {
		Bundler.clearCache();
		mask.Module.clearCache();
	},
	'should bundle mask' () {
		return Bundler.build('main.mask', {}).done(resources => {
			eq_(resources.length, 1);
			var main = resources[0];
			
			eq_(main.type, 'mask'); 
			eq_(main.url, 'build/release/main.mask');

			var load = assert.avoid('Should not load the dependency');
			mask.cfg('getFile', load);

			var  html = mask.render(main.content)
			has_(html, 'I am an A</h4>')
			mask.cfg('getFile', null)
		});
	},
	'should get mask resources for html' () {
		return Bundler
			.getResources('index.html')
			.then(arr => arr.map(x => x.toJSON(false)))
			.done(arr => {			
				eq_(arr.length, 4);

				var paths = arr.map(x => x.url);
				deepEq_(paths, ['compos/Letter.mask', 'main.mask', 'global.mask', 'index.html']);

				var asModules = arr.map(x => x.asModules);
				deepEq_(asModules, [['mask'], ['mask'], ['mask'], ['root']]);
			});
	},
	'should bundle mask in html page' () {
		return Bundler.build('index.html').done(resources => {
			
			eq_(resources.length, 1);
			eq_(resources[0].type, 'load');
			var main = resources[0];
			eq_(main.url, 'build/release/index.html');

			['compos/Letter.mask', 'main.mask', 'global.mask']
				.forEach(path => has_(main.content, `module path="${path}"`));

		});
	},
	'should test mask sync module loading' (done) {
	
		var Files = {
			'MyComponents.mask': `
				module path='A.mask' {
					h1 > 'A'
				}
				module path='B.mask' {
					h1 > 'B'
				}
				module path='C.mask' {
					h1 > 'C'
				}
			`,
			'MyNumber.mask': `
				import * as Template from './B';
				Template;
			`
		};
		var _queue = [];
		mask.cfg('getFile', (path) => {
			var dfr = new mask.class.Deferred();
			var name = path.substring(path.lastIndexOf('/') + 1);
			var str = Files[name];			
			is_(str, 'String');
			_queue.push(name);
			if (name === 'MyComponents.mask') {
				setTimeout(() => dfr.resolve(str), 200);
				return dfr;
			}
			return dfr.resolve(str);
		});

		mask
			.renderAsync(`
				import sync from './MyComponents';
				import Number from './MyNumber';
			`)
			.done(x => {
				mask.cfg('getFile', null);
				deepEq_(_queue, ['MyComponents.mask', 'MyNumber.mask']);
				done();
			})
	},
	'!should test pages in html page' (done) {
		Bundler.build('pages.html').done(resources => {
			
			eq_(resources.length, 3);
			var urls = resources.map(x => x.url);
			deepEq_(urls, [
				'build/release/info_index.mask',
				'build/release/about_index.mask', 
				'build/release/pages.html'
			]);

			var main = resources[2];

			
			urls
				.slice(0, urls.length - 1)
				.forEach(path => has_(main.content, `import sync from '${path}';`));


			// mask.cfg('getFile', path => {
			// 	logger.log(path.bold.cyan)
			// 	var resource = resources.find(x => x.url === path);
			// 	is_(resource, 'Object');
			// });

			var template = mask.j(main.content).find('script').text();
			template = template.replace(/sync/g, '')
			logger.log(template.bold)

			mask.parse(`
				View page='name' {
					import sync from 'build/release/about_index.mask';
					import from './about-a';
					import from './about-b';
				}
				View page='name' {
					import sync from 'build/release/info_index.mask';
					import from './about-a';
					import from './about-b';
				}
			`)
			logger.log(mask.parse(template) == null);
			done();
			return;

			template = mask.j(template).find('View').first().text();
			logger.log(template.cyan)
			mask
				.renderAsync(template)
				.done(html => {
					

					done();
				})
		});
	},
})