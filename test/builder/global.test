import { Bundler } from '../../src/Bundler';

var Files =  {
	'la.js': `
        import './b'
        export const A = '[a]'
    `
};

//var Bundler;
UTest({
	$before () {
		TestHelper.registerFiles(Files);		
		Bundler.clearCache();
	},
	$after () {
		TestHelper.clearFiles(Files);
	},
	$teardown () {
		Bundler.clearCache();		
	},
	$config: {
		breakOnError: true
	},
	'!should inline import scripts' () {
        Bundler.io.File.registerExtensions({
            '.js': [ 
                [{ read () { throw Error('is read')} }, 'read']
            ]
        });
		return Bundler.build('la.js', { 
			//silent: true,
			module: 'global',
		}).done(resources => {
            eq_(resources.length, 1);
			var main = resources[0];
			eq_(main.url, '/build/release/la.js');			
		});
	},
	'should get script resources for html' () {
		return Bundler
			.getResources('index.html', { silent: true })
			.then(arr => arr.map(x => x.toJSON(false)))
			.done(arr => {			
				eq_(arr.length, 4);

				var paths = arr.map(x => x.url);
				deepEq_(paths, [
					'/data/icons.js', 
					'/main.js', 
					'/global.js', 
					'/index.html']);

				var asModules = arr.map(x => x.asModules);
				deepEq_(asModules, [['commonjs'], ['commonjs'], ['global'], ['root']]);
			});
	},
	'should bundle scripts in html page' () {
		return Bundler.build('index.html', {
			module: 'commonjs',
			silent: true,
		}).done(resources => {
			
			eq_(resources.length, 2);
			eq_(resources[0].type, 'js');
			var script = resources[0];

			global.eval(script.content);			
			eq_(typeof getData, 'function');
			deepEq_(getData(), {
				letters: ['a', 'b']
			});

			eq_(resources[1].type, 'html');
			eq_(resources[1].url, '/build/release/index.html');
			has_(resources[1].content, 'src="main_index.js"');			
		});
	},
	'should bundle scripts in html with overriden mainOutputPath' () {
		return Bundler.build('index.html', {
			module: 'commonjs',
			outputMain: '{filename}.{build}.{ext}',
			silent: true,
		}).done(resources => {
			eq_(resources[1].url, '/index.release.html');
			has_(resources[1].content, 'src="build/release/main_index.js"');			
		});
	}
})