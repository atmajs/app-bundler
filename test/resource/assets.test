var Files =  {
	'main.js': `
		require('./styles/icons.less');
	`,
	'styles/icons.less': `
		.gear { background: url("foodir/gear.png") center; }
		.user { background: url("/styles/foodir/user.png") center; }
	`,
};
UTest({
	$before () {
		TestHelper.registerFiles(Files);
	},
	'should get resource tree from files for same bases' () {
		return Bundler.clearCache().getResources('main.js').done(resources => {
			var urls = resources.map(x => x.url);
			deepEq_(urls, [ "main.js", "styles/icons.less" ]);

			var css = resources[1].content;
			has_(css, '"../assets/styles/foodir/gear.png"');
			has_(css, '"/styles/foodir/user.png"', 'Absolute path by same bases is not rewritten');

			var assets = Bundler.AssetsManager.getAssets();
			var arr = assets.map(x => x.toTarget().toJSON());
			eq_(arr.length, 1, 'Only when asset with relative path in less should be copied')
			eq_(arr[0].url, 'build/release/assets/styles/foodir/gear.png')
		});
	},
	'should get resource tree from files for different bases' () {
		return Bundler.clearCache().getResources('main.js', { outputBase: 'dist' }).done(resources => {
			var urls = resources.map(x => x.url);
			deepEq_(urls, [ "main.js", "styles/icons.less" ]);

			var css = resources[1].content;
			has_(css, '"../assets/styles/foodir/gear.png"');
			has_(css, '"../assets/styles/foodir/user.png"');

			var assets = Bundler.AssetsManager.getAssets();

			var arr = assets.map(x => x.toTarget().toJSON());
			eq_(arr.length, 2, 'Only when asset with relative path in less should be copied')
			eq_(arr[0].url, 'build/release/assets/styles/foodir/gear.png')
		});
	}
});